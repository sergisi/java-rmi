#+TITLE: Java RMI: An Online Exam

** Description
In this project bla bla bla

*** UML sequence
#+caption: UML Sequence diagram
#+attr_html: :width 700
#+attr_org: :width 700
[[./doc/img/uml-flow.png]]

*** UML classes
#+caption: UML Classes diagram
#+attr_html: :width 700
#+attr_org: :width 700
[[./doc/img/uml-classes.png]]
*** TODO Tests


** Installation

** Usage

** Roadmap
*** DONE Define Common
Define the interfaces which the Server and the Client will rely on the
communication.
**** DONE Define ClientPromise
**** DONE Define SessionMaker

*** PROJ Make the Server
Implement the Server that the professor will execute.
**** DONE Make tests for Question
+ [X] Make test for isCorrectAnswer
  - [X] If the integer is the correct answer, then return True
  - [X] Else return False
+ [X] Make getQuestion
  Returns a multiline string as:
    #+begin_src python
return """ Question
           - [0]: Choice 0
           - [1]: Choice 1
           - [2]: Choice 2
           [ ... ]
"""
    #+end_src
+ [X] Make static parseLine
  - [X] Test for a correct string with 3 choice
  - [X] Test a correct string with 4 choices
  - [X] Test an incorrect string with 1 choice
  - [X] Test an unparsable string
  - [X] Test an incorrect string with "Question;Correct choice"

**** DONE Make Question
+ [X] Make question final
+ [X] Make the fields
+ [X] Make the methods
+ [X] Make the static function parseLine, that given a question line parses a String
  
**** DONE Make tests for UserSession
+ [X] Test Creation of UserSession: integers are 0 and 0, and different creations the UserSession are equal.
+ [X] Test nextQuestionCorrect: both integers are summed 1 and 1.
+ [X] Test nextQuestion: only the actual question is incremented.
  
**** DONE Make UserSession
+ [X] Make the UserSession final: this will let the compiler make the necessary optimizations.
+ [X] Make the fields
+ [X] Make the methods
  
**** DONE Make tests for SessionMakerImpl
+ [X] Test newSession:
  - [X] Adds an entry to users, with the passes Id and a new UserSession.
  - [X] Test that this behavior with more than one user.
  - [X] Test that a student that tries to create a session for the second time does not break anything.
  - [X] Adds an entry to the client map.
    
+ [X] Test answerQuestion
  - [X] test that an answer calls:
    + [X] The corresponding ~Question~ with ~isCorrectAnswer~. Make an interface to test this.
    + [X] The corresponding ~UserSession~ calls ~nextQuestionCorrect~ if ~isCorrectAnswer~ is ~True~, and ~nextQuestion~ if ~isCorrectAnswer~ is ~False~.
+ [X] Test ~hasNext~
  - [X] Test that it calls
    + [X] ~UserSession.getActualAnswer~ is called
  - [X] Returns that the ~actualQuestion~ is smaller than ~question~
+ [X] Test ~next~
  - [X] Returns a ~Question~
  - [X] Throws an error if the ~Question~ does not exist
+ [X] Test ~finishExam~.
  - [X] Test that calls all finishExam that are in the map, even if some fail with a remote exception.
  - [X] Test that calls after finishExam will render to nothing.
+ [X] Test ~startExam~: It calls all ~ClientPromise.startExam~.

**** DONE Implement SessionMakerImpl
+ [X] ~answerQuestion~
+ [X] ~newSession~
+ [X] ~hasNext~
+ [X] ~next~
+ [X] ~finishExam~
+ [X] ~startExam~


**** TODO Test Professor
First search if you can use mockito to mock IO by user.
+ [ ] Test this pseudocode
  #+begin_src 
main = do
    inputfile, outputfile <- args
    session <- SessionMaker $ parseQuestion inputfile
    startExam <- readLn
    finishTheExam <- readLn
    finishExam outputfile session
  #+end_src
To test this pseudocode, we will need a class that
encapsulates the parsing. We will make an ~AdaptateSystem~
and we will also make a ~ParseQuestions~. Both classes
should be only for static methods, but Java 1.8 makes it
hard to test them (it is only on later versions that you
can mock them easily with mockito), so we will make use
of this classes.

#+begin_src plantuml :dir doc :file img/uml-adaptete.png

!define BASEPATH .
!include BASEPATH/global/stylesheet.puml

class AdaptateSystem {
    + readLn() : String
    + printLn(line: String): void
}

class ParseQuestions {
    + parseQuestionsFile(filepath: String): List<Question>
}
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:doc/img/uml-adaptete.png]]

**** TODO Implement Professor

*** DONE Make Client
**** DONE Make Client Promise Test
+ [X] ~finishExam~ sets:
  - [X] correctAnswers
  - [X] totalQuestions
  - [X] finishExam = true
+ [X] ~startExam~ calls:
  + [X] ~notifyAll~
  + [X] sets ~startExam~ to ~true~
    
    
**** DONE Make Client Promise
+ [X] make ~finishExam~
+ [X] make ~startExam~
  
**** DONE Make Student executable
Test the calls of this pseudocode:
#+begin_src 
main = do
        id <- readLn
        client <- ClientPromise
        sessionMaker.newSession(id, client)
        while sessionMaker.hasNext(id):
            question <- sessionMaker.next(id)
            printLn $ question
            answer <- readLn
            sessionMaker.answerQuestion(id, answer)
#+end_src
**** DONE Test that even when an error is thrown the client checks if the exam has finished
** Technologies used
- For the executable project, we used the technologies:
  + Java 1.8
  + Java RMI

- For the tests, we used:
  + JUnit 5
  + Mockito
    

- For the documentation, we used the Emacs org-mode:
  + org-mode
  + plantUML
  We recommend to use Doom Emacs or Spacemacs for this.
  
** Authors and acknowledgment
+ iancalvo
+ quimpm
+ sergisi

** License
This is distributed with GPLv3. More about the license can be found at [[./LICENSE]]
  
  
