#+TITLE: UML
#+author: quimpm, iancalvo, sergisi

* Introduction

* UML Sequence diagram

+ Explicar els diferents actors i sistemes de la seqüència.
  - Student :: Actor 
  - Client :: Sistema de connexió amb el client.
  - Server :: Sistema de connexió amb el Professor
  - Professor :: Actor
+ 2 formes correctes d'acabar
  - Student acaba l'examen
  - Professor acaba l'examen
  Hem triat la segona perquè es pot veure que
  les dos uniques comunicacions que s'han de començar
  desde el servidor cap al client.
+ Es pot veure la estructura d'iterador de les preguntes.

#+begin_src plantuml :file img/uml-flow.png :dir .
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml
actor Student order 0
participant Client order 10
participant RMIRegistry order 15
participant Server order 20
actor Professor order 30

Professor -> Server : newSession(questions)
Server -> RMIRegistry : bind("SessionMaker", sessionMaker)
activate RMIRegistry
Student -> Client : newSession(idStudent)
Client -> RMIRegistry : lookup("SessionMaker")
RMIRegistry --> Client : SessionMaker class
activate Client

Client -> Server : newSession(idStudent)
Client <-- Server: Ok
Student <-- Client: Waiting to start the exam
deactivate Client
Professor <-- Server : A new Student has connected n_students

Professor -> Server: startExam()
Server -> Client: firstQuestion()

Student <-- Client: Starting the exam
    
loop hasNext(idStudent) or finished exam
    Client -> Server: next(idStudent)
    Client <-- Server : Question
    Student <-- Client: Question
    Student -> Client: answerQuestion(answer)
    Client -> Server: answerQuestion(idStudent, answer)
end

Professor -> Server: finishExam()
Server -> Client: finishExam(correctAnswers, totalAnswers)

Student <-- Client: Finished exam with score x/y

Professor <-- Server: Scores for the exam.
deactivate RMIRegistry
#+end_src

#+RESULTS:
[[file:img/uml-flow.png]]

#+attr_org: :width 700
#+caption: UML Sequence diagram
[[file:img/uml-flow.png]]

* UML Classes diagram
Introduction

** Interficies
+ SessionMaker :: Serves as point of connection from the Server. The
  client can use it to make a new Session, providing the id and a class
  that will be used to tell the client when to start or to finish the
  exam. It is also the point of connection to get and answer the questions.
  This interaction is designed to be used as an ~Iterator~.
+ ClientPromise :: Acts as an asyncrous way to tell the Client when to
  start or finish the exam from the server.

** Classes
+ Professor :: Runnable
  - Runnable
  - S'introdueix ~inputfile~ com a arg 0.
  - S'intordueix ~outputfile~ com a arg 1.
+ Student :: Runnable
+ Question :: 
  - Final
  - ~parseLine~ per evitar problemes als textos. Es pot veure com un
    Builder.
+ UserSession ::
  - És final: perque es final
    + Compilador acabarà fent la mutabilitat ell
    + La mutabiltat passa a ser explícita, que en sistemes
      concurrents i / o distribuïts facilita la programació.
  
+ SessionMakerImpl :: 
  - startExam
  - finishExam
  - Resolem les interaccions entre question, usersession i SessionMaker
    com a ArrayList, hashmap...

+ ClientPromiseImpl :: Implementació del client. ~finishExam~ finalitzarà
  l'executable.


#+BEGIN_SRC plantuml :file img/uml-classes.png :dir .
'General Defaults
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml

note top of SessionMaker : type alias IdStudent = String
interface SessionMaker {
    + newSession(idStudet: IdStudent, client: ClientPromise): void
    + answerQuestion(idStudent: IdStudent, answer: Integer): void
    + hasNext(idStudent: IdStudent): Boolean
    + next(idStudent: IdStudent): String
}

class SessionMakerImpl {
    - question: ArrayList<Question>
    - users: HashMap<IdStudent, UserSession>
    - client: HashMap<IdStudent, ClientPromise>
    ~ finishExam(): void
    ~ startExam(): void
}

class Question {
    - question: String
    - correctAnswer: Integer
    + isCorrectAnswer(choice: Integer): Bool
    + getQuestion(): String
    + static parseLine(question: String): Question
}

class UserSession {
    - correctAnswers: Integer
    - actualQuestion: Integer
    + nextQuestionCorrect(): UserSession
    + nextQuestion(): UserSession
}

class Professor {
    + static main(args: String[])
}

interface ClientPromise {
    + finishExam(correctAnswer: Integer, totalQuestions: Integer): void
    + startExam(): void
}

class ClientPromiseImpl {
    
}

class Student {
    + static main(args: String[])
}

interface Remote {
}

Remote <|-- ClientPromise

Remote <|-- SessionMaker
    
SessionMakerImpl *-- Question
SessionMakerImpl *-- UserSession
SessionMakerImpl *-- ClientPromise

SessionMaker <|-- SessionMakerImpl

Professor -- SessionMakerImpl

ClientPromise <|-- ClientPromiseImpl

Student -- SessionMaker

Student -- ClientPromise
#+end_src

#+RESULTS:
[[file:img/uml-classes.png]]

#+caption: Class UML
#+attr_org: :width 700
[[file:img/uml-classes.png]]


