#+TITLE: UML
#+author: Joaquim Picó Mora, Ian Palacín Aliana, Sergi Simón Balcells

* GitHub
[[https://github.com/sergisi/java-rmi][Link to github.]] In ~doc/img/~ you will find the images of the diagrams
if you have trouble to see the diagram in the PDF.

* UML Sequence diagram

+ Elements
  - Student :: Actor that will be interacting with the client.
  - Client :: System of connection to the Student.
  - RMIRegistry :: The RMI Registry that the server binds to the common interface and the client lookup in orther to get an Instance of the SessionMaker Class.
  - Server :: System of connection to the Professor.
  - Professor :: Actor that will be interacting with the server.
+ In the workflow of an exam there are two ways to finnish:
  - The student answers all questions and finnishes the exam
  - The student didn't answer all the questions and the professor finnishes the exam
  We chosed the seccond one as we can see both communication to be made from the server
  to the client. Moreover, in this diagram also we can see all the things from the first
  workflow.

+ Even though the workflow is well seen in the UML sequence, one thing that we would 
  like to point out is that we do the loop with the use of an iterator.


#+begin_src plantuml :file img/uml-flow.png :dir .
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml
actor Student order 0
participant Client order 10
participant RMIRegistry order 15
participant Server order 20
actor Professor order 30
participant WS order 12

Professor -> Server : authenticate(username, password)
Server -> WS: autheticate(username, password)
Professor -> Server : createExam(description, time, location)
Server -> WS: createExam(description, time, location)
Professor -> Server : newSession(questions)
Server -> RMIRegistry : bind(idExam, sessionMaker)
activate RMIRegistry
        
Student -> Client: authenticate(username, password)
Client -> WS: authenticate(username, password)
WS --> Client: Token
loop not chosed exam
    Student -> Client : searchOrListOrChoose(someParameters)
    Client -> WS : someCommand(someParameters)
    WS --> Client: Information about the command
    Client --> Student: Information about the command
end

Student -> Client : newSession(idStudent)
Client -> RMIRegistry : lookup(idExam)
RMIRegistry --> Client : SessionMaker class
activate Client

Client -> Server : newSession(idStudent)
Client <-- Server: Ok
Student <-- Client: Waiting to start the exam
deactivate Client
Professor <-- Server : A new Student has connected n_students

Professor -> Server: startExam()
Server -> Client: firstQuestion()

Student <-- Client: Starting the exam
    
loop hasNext(idStudent) or finished exam
    Client -> Server: next(idStudent)
    Client <-- Server : Question
    Student <-- Client: Question
    Student -> Client: answerQuestion(answer)
    Client -> Server: answerQuestion(idStudent, answer)
end

Professor -> Server: finishExam()
Server -> WS: uploadGrades(grades)
Server -> Client: finishExam(correctAnswers, totalAnswers)

Student <-- Client: Finished exam with score x/y

        
Professor <-- Server: Scores for the exam.
deactivate RMIRegistry

#+end_src

#+attr_org: :width 600
#+caption: UML Sequence diagram
#+RESULTS:
[[file:img/uml-flow.png]]

* UML Student main test
#+begin_src plantuml :file img/uml-main-test.png :dir .
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml
actor Student order 0
participant Client order 10
participant RMIRegistry order 15

Client -> RMIRegistry : lookup("SessionMaker")
RMIRegistry --> Client : SessionMakerMock
Client --> Student : println("Put your id for this session")
Student --> Client : readLn() = "1234" 
Client --> Client : ClientPromiseImpl.isStartExam() = false
Client --> Client : ClientPromiseImpl.isStartExam() = true
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = false
Client --> Client : session.next() = "Question"
Client --> Student : printLn("Question")
Student --> Client : readLn() = "1"
Client --> Client: session.answerQuestion(1)
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = false
Client --> Client : session.next() = "Question2"
Client --> Student : printLn("Question2")
Student --> Client : readLn() = "2"
Client --> Client: session.answerQuestion(2)
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = true
Client --> Student : printLn("The exam has finished, you have a score of 1/3")
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:img/uml-main-test.png]]

* UML Classes diagram
** Interfaces
+ SessionMaker :: Serves as point of connection from the Server. The
  client can use it to make a new Session, providing the id and a class
  that will be used to tell the client when to start or to finish the
  exam. It is also the point of connection to get and answer the questions.
  This interaction is designed to be used as an ~Iterator~.
+ ClientPromise :: Acts as an asynchronous way to tell the Client when to
  start or finish the exam from the server.

** Classes

+ Professor :: It is a runnable that takes as its first parameter the
  input file containing the questions and answers of the exam. The second 
  parameter it's the path to the output file where the results will be 
  stored. It's the part that will start the server side.
  System is static and it can't be mocked by mockito, so to make the tests
  unitary we have implemented two adapters, AdaptParse and AdaptSystem.
  As RMI concerns, here is the part where the common object with the clients
  is created and binded for them to locate it.

+ AdaptParse :: Class that helps Professor to parse the input file with the questions
  and answers.

+ AdaptSystem :: Class that helps Professor and Client to intermediate with System,
  as we explained it also serves to make it easier to mock for testing.


+ Question :: Stores in the server the formatted question as a multiline string that
  has the following formatting:
  #+begin_src text
Question?
- [0] Choice 0
- [1] Choice 1
- [2] Choice 2
  [...]
  #+end_src
  It will also contain which choice is the correct one.

  Finally, this class will contain a static method to parse the line
  from the format file to the one stored in the server. It can be
  seen as a static ~Builder~.

+ UserSession ::
  This class is the one that will store the state of the client session.
  We decided to make it final, because the compiler will notice at the lower
  level and turn it mutable, and we will be able to enjoy the advantages of 
  immutability at the time to do concurrency.

+ SessionMakerImplementation ::
  This class holds the implementation of the SessionMaker interface and has two
  important additional methods, startExam and finishExam. These functions are for
  ~Professor~ to start and end the exam. We also make use of AdaptSystem in this
  class. 
  In ~SessionMaker~ we manage the interactions between the classes:
  - ~Question~ :: It will be stored as an ~ArrayList~
  - ~UserSession~ :: It will be stored in a ~HashMap<IdStudent, UserSession>~
  - ~ClientPromise~ :: It will be stored in a ~HashMap<IdStudent, ClientPromise>~

+ Client :: Much like Professor, it will be the part that will start the client
  side. In this case has no parameters, and it is also a runnable.
  As RMI concerns, it gets the SessionMaker locating the default registry and
  cast the object returned by a lookup to \"SessionMaker\".
  To know if the exam has finished, it polls clientPromise each second to check
  out if the server has updated the state of the exam. This makes the development 
  of the tests a lot easier at the cost of a slow response at the time to know
  if the exam has finished. For example, when the client is waiting for the student
  to write the answer of a question, it can't poll the server, so as long as the student
  doesn't do any action, the client would not know that the exam has finished.
  Nonetheless, once the student answers, if it is out of time it won't count. We found
  this solution cleaner than the counterpart, which is the possibility to write 
  at the same time as the student answers the question, and make undesired actions.


+ ClientPromiseImpl :: Provides an implementation of the Remote interface
  ~ClientPromise~. It extends UnicastRemoteObject in order for work as a
  remote object for RMI. ~finishExam~ method will end the execution of the 
  main thread once it has shown the score to the student.


#+BEGIN_SRC plantuml :file img/uml-classes.png :dir .
'General Defaults
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml

note top of common.SessionMaker : type alias IdStudent = String
interface common.SessionMaker {
    + newSession(idStudet: IdStudent, client: ClientPromise): void
    + answerQuestion(idStudent: IdStudent, answer: Integer): void
    + hasNext(idStudent: IdStudent): Boolean
    + next(idStudent: IdStudent): String
}

class server.main.SessionMakerImpl {
    - question: ArrayList<Question>
    - users: HashMap<IdStudent, UserSession>
    - client: HashMap<IdStudent, ClientPromise>
    - idExam: String
    ~ finishExam(): void
    ~ startExam(): void
    ~ getNumberOfQuestion() : int
    ~ getResults() : Stream<Map.Entry<String, UserSession>>
}

class server.main.Question {
    - question: String
    - correctAnswer: Integer
    + isCorrectAnswer(choice: Integer): Bool
    + getQuestion(): String
    + static parseLine(question: String): Question
}

class server.main.UserSession {
    - correctAnswers: Integer
    - actualQuestion: Integer
    + nextQuestionCorrect(): UserSession
    + nextQuestion(): UserSession
}

class server.main.Professor {
    + static main(args: String[])
}

interface common.ClientPromise {
    + finishExam(correctAnswer: Integer, totalQuestions: Integer): void
    + startExam(): void
}

class client.main.ClientPromiseImpl {
    
}

class client.main.Client {
    + static main(args: String[])
}

interface Remote {
}

class adaptators.AdaptParse {
    + parseQuestionFile(filepath: String)
}

class adaptators.AdaptSystem {
    + printLn(line: String): void
    + readLn(): String
    + getContents(filepath: String): List<String> 
    + getOutputFile(filepath: String): PrintWriter
}

class client.rest.Http {
        + authenticateStudent(username: String, password: String): void
        + getStudentId(): String
        + getListSearchExams(keywords: String): String
        + getListAllExams(): String
        + getExamLocation(idExam: String): String
}

class server.rest.Http {
        + authenticateProfessor(username: String, password: String): void
        + createExam(description: String, date: String, location: String): String
        + uploadStudentGrade(idStudent: String, idExam: String, grade: float): void
        + setToken(token: String): void
}

class UnicastRemoteObject {}

UnicastRemoteObject <|-- server.main.SessionMakerImpl
UnicastRemoteObject <|-- client.main.ClientPromiseImpl

Remote <|-- common.ClientPromise

Remote <|-- common.SessionMaker
    
server.main.SessionMakerImpl *-- server.main.Question
server.main.SessionMakerImpl *-- server.main.UserSession
server.main.SessionMakerImpl *-- common.ClientPromise

common.SessionMaker <|-- server.main.SessionMakerImpl

server.main.Professor -- server.main.SessionMakerImpl

common.ClientPromise <|-- client.main.ClientPromiseImpl

client.main.Client -- common.SessionMaker

client.main.Client -- common.ClientPromise

adaptators.AdaptSystem -- adaptators.AdaptParse
adaptators.AdaptSystem -- client.main.Client
adaptators.AdaptSystem -- server.main.Professor
adaptators.AdaptParse -- server.main.Professor

client.rest.Http -- client.main.Client
server.rest.Http -- server.main.Professor
server.rest.Http -- server.main.SessionMakerImpl
#+end_src

#+caption: Class UML
#+attr_org: :width 900
#+RESULTS:
[[file:img/uml-classes.png]]


