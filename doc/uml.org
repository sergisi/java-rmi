#+TITLE: UML
#+author: Joaquim Picó Mora, Ian Palacín Aliana, Sergi Simón Balcells

* GitHub
[[https://github.com/sergisi/java-rmi][Link to github.]] In ~doc/img/~ you will find the images of the diagrams
if you have trouble to see the diagram in the PDF.

* UML Sequence diagram

+ Elements
  - Student :: Actor that will be interacting with the client.
  - Client :: System of connection to the Student.
  - Server :: System of connection to the Professor.
  - Professor :: Actor that will be interacting with the server.
+ In the workflow of an exam there are two ways to finnish:
  - The student answers all questions and finnishes the exam
  - The student didn't answer all the questions and the professor finnishes the exam
  We chosed the seccond one as we can see both communication to be made from the server
  to the client. Moreover, in this diagram also we can see all the things from the first
  workflow.

+ Even though the workflow is well seen in the UML sequence, one thing that we would 
  like to point out is that we do the loop with the use of an iterator. 


#+begin_src plantuml :file img/uml-flow.png :dir .
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml
actor Student order 0
participant Client order 10
participant RMIRegistry order 15
participant Server order 20
actor Professor order 30

Professor -> Server : newSession(questions)
Server -> RMIRegistry : bind("SessionMaker", sessionMaker)
activate RMIRegistry
Student -> Client : newSession(idStudent)
Client -> RMIRegistry : lookup("SessionMaker")
RMIRegistry --> Client : SessionMaker class
activate Client

Client -> Server : newSession(idStudent)
Client <-- Server: Ok
Student <-- Client: Waiting to start the exam
deactivate Client
Professor <-- Server : A new Student has connected n_students

Professor -> Server: startExam()
Server -> Client: firstQuestion()

Student <-- Client: Starting the exam
    
loop hasNext(idStudent) or finished exam
    Client -> Server: next(idStudent)
    Client <-- Server : Question
    Student <-- Client: Question
    Student -> Client: answerQuestion(answer)
    Client -> Server: answerQuestion(idStudent, answer)
end

Professor -> Server: finishExam()
Server -> Client: finishExam(correctAnswers, totalAnswers)

Student <-- Client: Finished exam with score x/y

Professor <-- Server: Scores for the exam.
deactivate RMIRegistry
#+end_src

#+RESULTS:
[[file:img/uml-flow.png]]

#+attr_org: :width 700
#+caption: UML Sequence diagram
[[file:img/uml-flow.png]]

* UML Student main test
#+begin_src plantuml :file img/uml-main-test.png :dir .
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml
actor Student order 0
participant Client order 10
participant RMIRegistry order 15

Client -> RMIRegistry : lookup("SessionMaker")
RMIRegistry --> Client : SessionMakerMock
Client --> Student : println("Put your id for this session")
Student --> Cleint : readLn() = "1234" 
Client --> Client : ClientPromiseImpl.isStartExam() = false
Client --> Client : ClientPromiseImpl.isStartExam() = true
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = false
Client --> Client : session.next() = "Question"
Client --> Student : printLn("Question")
Student --> Client : readLn() = "1"
Client --> Client: session.answerQuestion(1)
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = false
Client --> Client : session.next() = "Question2"
Client --> Student : printLn("Question2")
Student --> Client : readLn() = "2"
Client --> Client: session.answerQuestion(2)
Client --> Client : session.hasNext() = true
Client --> Client : clientPromise.isFinishExam() = true
Client --> Student : printLn("The exam has finished, you have a score of 1/3")
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:img/uml-main-test.png]]

* UML Classes diagram
** Interficies
+ SessionMaker :: Serves as point of connection from the Server. The
  client can use it to make a new Session, providing the id and a class
  that will be used to tell the client when to start or to finish the
  exam. It is also the point of connection to get and answer the questions.
  This interaction is designed to be used as an ~Iterator~.
+ ClientPromise :: Acts as an asyncrous way to tell the Client when to
  start or finish the exam from the server.

** Classes
+ Professor :: It will be a runnable that will take as its first parameter
  the input file containing
  the questions and answers of the exam. The second parameter will be the
  path to the output
  file where the results will be stored. It's the part that will start the
  server side.
+ Student ::  Much like Professor, it will be the part that will start the
  client side. In this case it 
  has no parameters, and it is also a runnable.
+ Question :: Question stores in the server the formated question
  as a multiline string that has the following formatting:
  #+begin_src text
Question?
- [0] Choice 0
- [1] Choice 1
- [2] Choice 2
  [...]
  #+end_src
  It will also contain which choice is the correct one.

  Finally, this class will contain a static method to parse the line
  from the format file to the one stored in the server. It can be
  seen as a static ~Builder~.

+ UserSession ::
  This class is the one that will store the state of the client session.
  We decide it to make it final, becouse the compiler will notice at the lower
  level and turn it mutable, and we will be able to enjoy the advantages of 
  immutability at the time to do concurrency.
  
+ SessionMakerImpl :: 
  This class holds the implementation of the SessionMaker Interface and also has two additional
  methods, startExam and finishExam. This functions are for ~Professor~ to start and end the exam.
  In ~SessionMaker~ we manage the interactions between the classes:
  - ~Question~ :: It will be stored as an ~ArrayList~
  - ~UserSession~ :: It will be stored in a ~HashMap<IdStudent, UserSession>~
  - ~ClientPromise~ :: It will be stored in a ~HashMap<IdStudent, ClientPromise>~

+ ClientPromiseImpl :: It provides an implementation of the Remote interface
  ~ClientPromise~. ~finishExam~ method will end the execution of the main
  thread once it has shown the score to the student.


#+BEGIN_SRC plantuml :file img/uml-classes.png :dir .
'General Defaults
!define BASEPATH .
!include BASEPATH/global/stylesheet.puml

note top of SessionMaker : type alias IdStudent = String
interface SessionMaker {
    + newSession(idStudet: IdStudent, client: ClientPromise): void
    + answerQuestion(idStudent: IdStudent, answer: Integer): void
    + hasNext(idStudent: IdStudent): Boolean
    + next(idStudent: IdStudent): String
}

class SessionMakerImpl {
    - question: ArrayList<Question>
    - users: HashMap<IdStudent, UserSession>
    - client: HashMap<IdStudent, ClientPromise>
    ~ finishExam(): void
    ~ startExam(): void
}

class Question {
    - question: String
    - correctAnswer: Integer
    + isCorrectAnswer(choice: Integer): Bool
    + getQuestion(): String
    + static parseLine(question: String): Question
}

class UserSession {
    - correctAnswers: Integer
    - actualQuestion: Integer
    + nextQuestionCorrect(): UserSession
    + nextQuestion(): UserSession
}

class Professor {
    + static main(args: String[])
}

interface ClientPromise {
    + finishExam(correctAnswer: Integer, totalQuestions: Integer): void
    + startExam(): void
}

class ClientPromiseImpl {
    
}

class Student {
    + static main(args: String[])
}

interface Remote {
}

Remote <|-- ClientPromise

Remote <|-- SessionMaker
    
SessionMakerImpl *-- Question
SessionMakerImpl *-- UserSession
SessionMakerImpl *-- ClientPromise

SessionMaker <|-- SessionMakerImpl

Professor -- SessionMakerImpl

ClientPromise <|-- ClientPromiseImpl

Student -- SessionMaker

Student -- ClientPromise
#+end_src

#+RESULTS:
[[file:img/uml-classes.png]]

#+caption: Class UML
#+attr_org: :width 700
[[file:img/uml-classes.png]]


